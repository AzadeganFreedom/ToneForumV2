// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToneForum.Repository.Models;

#nullable disable

namespace ToneForum.Repository.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CollectionListRelease", b =>
                {
                    b.Property<int>("CollectionListsCollectionList_Id")
                        .HasColumnType("int");

                    b.Property<int>("ReleasesRelease_Id")
                        .HasColumnType("int");

                    b.HasKey("CollectionListsCollectionList_Id", "ReleasesRelease_Id");

                    b.HasIndex("ReleasesRelease_Id");

                    b.ToTable("CollectionListRelease");
                });

            modelBuilder.Entity("GenreRelease", b =>
                {
                    b.Property<int>("GenresGenre_Id")
                        .HasColumnType("int");

                    b.Property<int>("ReleasesRelease_Id")
                        .HasColumnType("int");

                    b.HasKey("GenresGenre_Id", "ReleasesRelease_Id");

                    b.HasIndex("ReleasesRelease_Id");

                    b.ToTable("GenreRelease");
                });

            modelBuilder.Entity("ReleaseWantList", b =>
                {
                    b.Property<int>("ReleasesRelease_Id")
                        .HasColumnType("int");

                    b.Property<int>("WantListsWantList_Id")
                        .HasColumnType("int");

                    b.HasKey("ReleasesRelease_Id", "WantListsWantList_Id");

                    b.HasIndex("WantListsWantList_Id");

                    b.ToTable("ReleaseWantList");
                });

            modelBuilder.Entity("ToneForum.Repository.Models.Band", b =>
                {
                    b.Property<int>("Band_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Band_Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("BandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("EndYear")
                        .HasColumnType("float");

                    b.Property<double>("StartYear")
                        .HasColumnType("float");

                    b.HasKey("Band_Id");

                    b.ToTable("Bands");
                });

            modelBuilder.Entity("ToneForum.Repository.Models.CollectionList", b =>
                {
                    b.Property<int>("CollectionList_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollectionList_Id"));

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("CollectionList_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("CollectionLists");
                });

            modelBuilder.Entity("ToneForum.Repository.Models.Format", b =>
                {
                    b.Property<int>("Format_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Format_Id"));

                    b.Property<string>("FormatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Format_Id");

                    b.ToTable("Formats");
                });

            modelBuilder.Entity("ToneForum.Repository.Models.Genre", b =>
                {
                    b.Property<int>("Genre_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Genre_Id"));

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentGenre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Genre_Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("ToneForum.Repository.Models.Release", b =>
                {
                    b.Property<int>("Release_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Release_Id"));

                    b.Property<int>("Band_Id")
                        .HasColumnType("int");

                    b.Property<string>("Genre_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReleaseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ReleaseYear")
                        .HasColumnType("float");

                    b.Property<int>("Type_Id")
                        .HasColumnType("int");

                    b.HasKey("Release_Id");

                    b.HasIndex("Band_Id");

                    b.HasIndex("Type_Id");

                    b.ToTable("Releases");
                });

            modelBuilder.Entity("ToneForum.Repository.Models.Type", b =>
                {
                    b.Property<int>("Type_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Type_Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Type_Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("ToneForum.Repository.Models.User", b =>
                {
                    b.Property<int>("User_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_Id"));

                    b.Property<bool>("AcceptTermsAndPolicy")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ToneForum.Repository.Models.WantList", b =>
                {
                    b.Property<int>("WantList_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WantList_Id"));

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("WantList_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("WantLists");
                });

            modelBuilder.Entity("CollectionListRelease", b =>
                {
                    b.HasOne("ToneForum.Repository.Models.CollectionList", null)
                        .WithMany()
                        .HasForeignKey("CollectionListsCollectionList_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToneForum.Repository.Models.Release", null)
                        .WithMany()
                        .HasForeignKey("ReleasesRelease_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreRelease", b =>
                {
                    b.HasOne("ToneForum.Repository.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresGenre_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToneForum.Repository.Models.Release", null)
                        .WithMany()
                        .HasForeignKey("ReleasesRelease_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReleaseWantList", b =>
                {
                    b.HasOne("ToneForum.Repository.Models.Release", null)
                        .WithMany()
                        .HasForeignKey("ReleasesRelease_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToneForum.Repository.Models.WantList", null)
                        .WithMany()
                        .HasForeignKey("WantListsWantList_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ToneForum.Repository.Models.CollectionList", b =>
                {
                    b.HasOne("ToneForum.Repository.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToneForum.Repository.Models.Release", b =>
                {
                    b.HasOne("ToneForum.Repository.Models.Band", "Band")
                        .WithMany()
                        .HasForeignKey("Band_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToneForum.Repository.Models.Type", "Type")
                        .WithMany("Releases")
                        .HasForeignKey("Type_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Band");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ToneForum.Repository.Models.WantList", b =>
                {
                    b.HasOne("ToneForum.Repository.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToneForum.Repository.Models.Type", b =>
                {
                    b.Navigation("Releases");
                });
#pragma warning restore 612, 618
        }
    }
}
